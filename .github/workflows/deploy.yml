name: Build & Deploy

on:
  push:
    branches: [ main ]

permissions:
  id-token: write       # OIDC で AWS ロールを引き受ける
  contents: read

env:
  AWS_REGION: ap-northeast-1
  ECR_REPO: 904368995258.dkr.ecr.ap-northeast-1.amazonaws.com/chachat-backend
  ECS_CLUSTER: aiqly-prod

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::904368995258:role/github-actions-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.ECR_REPO }}:latest
          cache-to: type=registry,ref=${{ env.ECR_REPO }}:buildcache,mode=max,image-manifest=true
          cache-from: type=registry,ref=${{ env.ECR_REPO }}:buildcache

      # --- Backend サービスのタスク定義登録 ---
      - name: Prepare Backend Task Definition JSON
        id: prepare_td_backend
        run: |
          # td-backend.json内のイメージ名を最新のECR URI:latestに置換します。
          # (td-backend.json内の "image": "IMAGE_PLACEHOLDER" のような記述を置換する想定)
          # もしtd-backend.jsonに直接ECR URIを記述している場合は、このステップはcpだけでもOKです。
          cp td-backend.json taskdef_backend_for_registration.json
          sed -i "s|IMAGE_PLACEHOLDER|${{ env.ECR_REPO }}:latest|g" taskdef_backend_for_registration.json
          echo "Prepared taskdef_backend_for_registration.json"

      - name: Register Backend Task Definition
        id: register_td_backend
        run: |
          NEW_TD_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://taskdef_backend_for_registration.json \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
          echo "new_td_backend=$NEW_TD_ARN" >> "$GITHUB_OUTPUT"

      # --- Celery Worker サービスのタスク定義登録 ---
      - name: Prepare Worker Task Definition JSON
        id: prepare_td_worker
        run: |
          # td_worker.json内のイメージ名を最新のECR URI:latestに置換します。
          cp td_worker.json taskdef_worker_for_registration.json
          sed -i "s|IMAGE_PLACEHOLDER|${{ env.ECR_REPO }}:latest|g" taskdef_worker_for_registration.json
          echo "Prepared taskdef_worker_for_registration.json"

      - name: Register Worker Task Definition
        id: register_td_worker
        run: |
          NEW_TD_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://taskdef_worker_for_registration.json \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
          echo "new_td_worker=$NEW_TD_ARN" >> "$GITHUB_OUTPUT"

      # --- Alembic マイグレーション (Backendタスク定義を使用) ---
      - name: Run Alembic migrations on RDS
        run: |
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --launch-type FARGATE \
            --task-definition ${{ steps.register_td_backend.outputs.new_td_backend }} \
            --count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-032da3af4dc382e44,subnet-09512824c0aaea846,subnet-04a264dde050c95e5],securityGroups=[sg-049ab2067088e7119],assignPublicIp=DISABLED}" \
            --overrides '{"containerOverrides":[{"name":"backend","command":["flask","db","upgrade"]}],"cpu":"256","memory":"512"}' \
            --started-by github-ci \
            --wait tasksStopped

      # --- サービスデプロイ ---
      - name: Deploy to ECS Backend Service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service backend \
            --task-definition ${{ steps.register_td_backend.outputs.new_td_backend }} \
            --force-new-deployment

      - name: Deploy to ECS Worker Service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service celery-worker \
            --task-definition ${{ steps.register_td_worker.outputs.new_td_worker }} \
            --force-new-deployment